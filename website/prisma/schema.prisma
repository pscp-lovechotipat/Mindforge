// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  aiServiceId String      @unique
  firstName   String      @db.VarChar(255)
  lastName    String      @db.VarChar(255)
  email       String      @unique @db.VarChar(255)
  password    String      @db.VarChar(255)
  profileUrl  String?     @db.LongText
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  roleId      Int?
  role        Role?       @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  skils       Skill[]
  workspaces  Workspace[]
  todos       Todo[]
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String? @db.VarChar(255)
  users       User[]
}

model Skill {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String? @db.VarChar(255)
  users       User[]
}

model Workspace {
  id              Int    @id @default(autoincrement())
  aiServiceId     String @unique
  name            String @db.VarChar(255)
  description     String @db.VarChar(10000)
  analyzeResponse Json?
  users           User[]
}

model Todo {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String   @db.VarChar(255)
  role      String   @db.VarChar(255)
  status    Int      @default(0) // 0, 1, 2
  priority  Int      @default(0) // 0, 1, 2
  raw       Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
